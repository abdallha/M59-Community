// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
DispelIllusion is Spell

constants:

   include blakston.khd

resources:

   include dispillu.lkod

   dispelillusion_name_rsc = "dispel illusion"
   dispelillusion_icon_rsc = idispill.bgf
   dispelillusion_desc_rsc = \
      "Attempts to dispel any illusions in your vicinity.  This powerful "
      "spell is the bane of the Riija school of magic, but at a significant "
      "cost in reagents."
   dispelillusion_castermsg_rsc = \
      "You cross your eyes momentarily to make the illusions in the area fade "
      "away."
   dispelillusion_sound = kdispill.ogg

classvars:

   vrName = dispelillusion_name_rsc
   vrIcon = dispelillusion_icon_rsc
   vrDesc = dispelillusion_desc_rsc

   vrSucceed_wav = dispelillusion_sound

   viSpell_num = SID_DISPEL_ILLUSION
   viSchool = SS_KRAANAN
   viSpell_level = 4
   viMana = 14
   viSpellExertion = 3
   viMeditate_ratio = 30

   viHarmful = TRUE
   viOutlaw = TRUE
   viNoNewbieOffense = TRUE
   vbIsAreaEffect = TRUE

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&UncutSeraphym,1],plReagents);
      plReagents = Cons([&Solagh,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 0;
   }


   GetTargets(who=$,lTargets=$)
   "This returns a list of valid targets in the room."
   {
      local oRoom, i, each_obj, lFinalTargets, iDistance_squared, iSpellpower;

      if who = $
      {
         return;
      }

      iSpellPower = Send(self,@GetSpellPower,#who=who);
	  
	  if IsClass(who,&Room)
      {
         oRoom = who;
      }
      else
      {
         oRoom = Send(who,@GetOwner);
      }

      foreach i in Send(oRoom,@GetHolderActive)
      {
         each_obj = First(i);

         // We do the guildhall check here now, not added to lFinalTargets
         // if they're not in the same zone as the caster.
         if IsClass(each_obj,&Battler)
            AND NOT (IsClass(oRoom,&GuildHall)
               AND Send(oRoom,@InFoyer,#who=each_obj)
                  <> Send(oRoom,@InFoyer,#who=who))
         {
            // Skip players who are phased/in spectator mode.
            if IsClass(each_obj,&Player)
               AND Send(each_obj,@IsInCannotInteractMode)
            {
               continue;
            }

            if each_obj <> $
            {
               iDistance_squared = Send(who,@SquaredDistanceTo,#what=each_obj);

               // SquaredDistanceTo returns $ for target not in same room
               if iDistance_squared <= (100 + iSpellPower*2)
               {
                  lFinalTargets = Cons(each_obj,lFinalTargets);
               }
            }
         }
      }

      return lFinalTargets;
   }
	
	
   DoSpellEffects(who = $,lTargets=$)
   {
      local oRoom, iSpellPower, i, bAll, iChance;

      iSpellPower = Send(self,@GetSpellPower,#who=who);
	  
	   oRoom = Send(who,@GetOwner);
	   
	   iChance = Bound(iSpellpower,10,99);
	   
	   lTargets = Send(self,@GetTargets,#who=who);
 
	   	   
	   foreach i in lTargets
	   {
	   
	   if IsClass(i,&Player)
      {
         bAll = Send(who,@CanPlayerPvP);
      }
      else
      {
         bAll = TRUE;
      }
	   
	   if bAll
	   {
	      Send(i,@DispelIllusionEnchantments, #who=who, #iChance=iChance, #stroke_obj=self);
	   }
      else
      {
         Send(i,@DispelIllusions, #who=who, #what=self, #iChance=iChance, #stroke_obj=self);
      }

      if IsClass(i,&Reflection)
      {
         send(i,@delete);
      }
 
	      Send(i,@MsgSendUser,#message_rsc=dispelillusion_castermsg_rsc);
		
		}
 
       return;
   }

   // We just needed a list of players in range, so we don't do anything here.
   StartEnchantment(who = $)
   "Starts enchantment effect on one player"
   {
      return;
   }
   
   GetScrollClass()
   {
      return &DispellIllusionScroll;
   }

end
////////////////////////////////////////////////////////////////////////////////
