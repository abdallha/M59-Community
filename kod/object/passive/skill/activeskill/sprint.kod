// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Sprint is ActiveSkill

constants:

   include blakston.khd

resources:

   Sprint_name_rsc = "sprint"
   Sprint_icon_rsc = brawlico.bgf
   Sprint_desc_rsc = \
      "Allows an agile and enduring warrior to run significantly faster at the "
      "cost of becoming winded at an accelerated rate."
      "\n\nNOTE: This is an actively held skill, which requires you to create and "
      "hold down a hotkey."

   Sprint_start = "You begin to sprint!"
   Sprint_end = "You stop sprinting."
   Sprint_exhaust = "You are too exhausted to sprint!"

classvars:

   vrName = Sprint_name_rsc
   vrIcon = Sprint_icon_rsc
   vrDesc = Sprint_desc_rsc
   vrSkill_tired = Sprint_exhaust

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = SKID_SPRINT
   viSchool = SKS_WEAPONCRAFT
   viSkill_level = 6
   viChance_to_Increase = 15
   viMeditate_ratio = 50

   viSkillExertion = 500
   
   vbCheck_exertion = TRUE

   vbAutomatic = FALSE

   viPostPerform_time = 0

   piExpireTimer = 0 

   
   /// Constants
   viBaseDuration = 1
   viSpeedBoost = 120
   piExpireTimeMax = 200

 ///  viCooldownSID = SID_COOLDOWN_SPRINT

   vbShowIcon = TRUE

properties:

   plPrerequisites = $
   ptExpire = $

messages:

   GetRequisiteStat(who=$)
   {
      return (2*Send(who,@GetAgility)+Send(who,@GetStamina))/3;
   }

   SuccessChance()
   {
      return TRUE;
   }

   BeginPerformPreparation(who=$,lTargets=$,bSuccess=TRUE)
   {
      local iSkillPower, iDuration, iSpeed, poOwner, piExpireTime, piSpeedBoost;

      poOwner = who;
      piExpireTime = 0;
      iSkillPower = Send(self,@GetSkillPower,#who=who);

      iDuration = (viBaseDuration + ((iSkillPower +1 )/20 + ((send(who,@GetaAility)/10))));
      debug(iDuration);

  //    Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,
  //       #wave_rsc=Sprint_sound_rsc);
         
      Send(who,@MsgSendUser,#message_rsc=Sprint_start);

      send(who,@AddMovementSpeedPercent,#ispeed=viSpeedBoost);  

      ptExpire = CreateTimer(self,@UpdateSprint, iDuration);

       return;
   }

   // Not much going on...
   PerformSkill(who=$,lTargets=$)
   {
      return;
   }

    UpdateSprint() 
    {
    local piExpireTime;

    piExpireTime += 1000;
    if piExpireTime >= piExpireTimeMax
    {
      Send(self,@SprintEnded,#who=poOwner);
      return; // don't recreate the timer for a next intervall
    }

    ptExpire = CreateTimer(self,@UpdateSprint,1000);

    return;
    }

   SprintEnded(who=$)
   {
      local iPower, oSpell; 

    if ptExpire <> $
    {
        Deletetimer(ptexpire);
        ptExpire = $;
    }
    
  //    iPower = Nth(state,7);
     Send(who,@MsgSendUser,#message_rsc=Sprint_end);
     Send(who,@ResetMovementSpeed);

     if Abs(Send(who,@GetLastMoveUpdate) - GetTickCount()) < 1000
        {
            Send(self,@ImproveAbility,#who=who);
        }
            
    //  Send(who,@WaveSendUser,#wave_rsc=Sprint_end_sound_rsc);

    // oSpell = Send(SYS,@FindSpellByNum,#num=viCooldownSID);
 
    //  Send(oSpell,@CastSpell,#who=self,#oTarget=who,
     //    #iSpellPower=iPower);
     return;
    }

   GetPeriodicSound()
   {
      return;
   }

   GetPeriodicSoundEnd()
   {
      return;
   }

   GetPeriodicSoundDuration()
   {
      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
