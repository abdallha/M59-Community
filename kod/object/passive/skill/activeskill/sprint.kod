// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Sprint is ActiveSkill

constants:

   include blakston.khd

resources:

   Sprint_name_rsc = "sprint"
   Sprint_icon_rsc = brawlico.bgf
   Sprint_desc_rsc = \
      "Allows an agile and enduring warrior to run significantly faster at the "
      "cost of becoming winded at an accelerated rate."
      "\n\nNOTE: This is an actively held skill, which requires you to create and "
      "hold down a hotkey."

   Sprint_start = "You begin to sprint!"
   Sprint_end = "You stop sprinting."
   Sprint_exhaust = "You are too exhausted to sprint!"

classvars:

   vrName = Sprint_name_rsc
   vrIcon = Sprint_icon_rsc
   vrDesc = Sprint_desc_rsc
   vrSkill_tired = Sprint_exhaust

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSkill_num = SKID_SPRINT
   viSchool = SKS_WEAPONCRAFT
   viSkill_level = 6
   viChance_to_Increase = 15
   viMeditate_ratio = 50

   viSkillExertion = 500
   
   vbCheck_exertion = TRUE

   vbAutomatic = FALSE

   viPostPerform_time = 0

   vbShowIcon = TRUE

properties:

   plPrerequisites = $

   pbCanActivateSprint = TRUE
   piExpireTime = 1000 * 10
   piSprintTime = 0
   poOwner = $
   ptExpire = $

messages:

   GetRequisiteStat(who=$)
   {
      return Send(who,@GetStamina);
   }

   PerformSkill(who=$,lTargets=$)
   {
      if pbCanActivateSprint
      {
         pbCanActivateSprint = FALSE;
         poOwner = who;
         piExpireTime = 1000 * 10;
         piSprintTime = 0;
         ptExpire = CreateTimer(self,@UpdateSprint,1000);
         
         Send(who,@MsgSendUser,#message_rsc=Sprint_start);
         Send(who,@AddMovementSpeedPercent,#ispeed=100);
      }

      return;
   }

   SuccessChance()
   {
      return TRUE;
   }

   UpdateSprint() 
   {
      piSprintTime += 1000;
      if piSprintTime >= piExpireTime
      {
         pbCanActivateSprint = TRUE;
         Send(poOwner,@AddMovementSpeedPercent,#ispeed=-100);
         Send(poOwner,@MsgSendUser,#message_rsc=Sprint_end);
         
         return;
      }

      ptExpire = CreateTimer(self,@UpdateSprint,1000);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
