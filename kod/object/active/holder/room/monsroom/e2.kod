// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
OutdoorsE2 is MonsterRoom

constants:

   include blakston.khd

resources:

   include e2.lkod

   room_name_OutdoorsE2 = "The Great Ocean"
   room_OutdoorsE2 = e2.roo
   OutdoorsE2_music = fight.ogg

   E2_oceanwalk = \
      "You decide you don't like saltwater enough to go swimming "
      "in the Great Ocean."
   E2_icewalk = "The ice looks a bit too thin to risk going any farther out."

classvars:

   vrName = room_name_OutdoorsE2

   viTeleport_row = 19
   viTeleport_col = 32

   viTerrain_type = TERRAIN_NECROPOLIS | TERRAIN_LAIR

   viFlag_row = 63
   viFlag_col = 5

   viWeatherZone = WEATHER_ZONE_CV

   viBossResetTime = 1000 * 60 * 60 * 6

properties:

   prRoom = room_OutdoorsE2
   prMusic = OutdoorsE2_music
   piRoom_num = RID_E2

   piBaseLight = LIGHT_VERY_DARK
   piOutside_factor = 0

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

   piGen_time = 20000
   piGen_percent = 70

   piInit_count_min = 6
   piInit_count_max = 10

   piMonster_count_max = 15

   ptBoss_gen = $
   pbBossCanSpawn = TRUE
   poBoss = $

   plHenchmen = $

messages:

   Constructor()
   {
      plMonsters = [ [&Necromancer, 50], [&DarkAngel, 25], [&Ghost, 25] ];

      propagate;
   }

   BossCanSpawn()
   {
      pbBossCanSpawn = TRUE;
   
      return;
   }

   CreateBoss()
   {
      if poBoss = $
         AND pbBossCanSpawn
      {
         poBoss = Create(&Lich);
         
         Send(self,@NewHold,#what=poBoss,
               #new_row=viTeleport_row,
               #new_col=viTeleport_col,
               #new_angle=ANGLE_SOUTH_EAST);
      }
      
      return;
   }

   CreateHenchmen()
   {
      local i, oTarget, iIndex;

      foreach oTarget in plHenchmen
      {
         Send(oTarget,@Delete);
      }
      plHenchmen = $;

      iIndex = Length(plGenerators);
      foreach i in plMonsters
      {
         oTarget = Create(First(i));

         Send(oTarget,@SetMaster,#oMaster=poBoss);

         Send(self,@NewHold,
            #what=oTarget,
            #new_row=viTeleport_row,
            #new_col=viTeleport_col,
            #new_angle=ANGLE_SOUTH_EAST
         );

         Send(oTarget,@SetSpawnLoc,
            #iRow=viTeleport_row,
            #iCol=viTeleport_col,
            #iIndex=iIndex
         );
         
         plHenchmen = Cons(oTarget, plHenchmen);

         ++iIndex;
      }

      return;
   }

   CreateStandardExits()
   {
      plEdge_Exits = $;
      plEdge_Exits = Cons([LEAVE_EAST, RID_F2, 21, 3, ROTATE_NONE], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_D4, 1, 23, ROTATE_NONE], plEdge_exits);

      propagate;
   }

   Delete()
   {
      if ptBoss_gen <> $
      {
         DeleteTimer(ptBoss_gen);
         ptBoss_gen = $;
      }

      poBoss = $;
      plHenchmen = $;

      propagate;
   }

   FirstUserEntered()
   {
      Send(self,@CreateBoss);
      Send(self,@CreateHenchmen);

      propagate;
   }

   LastUserLeft()
   {
      if poBoss <> $
      {
         Send(self,@Teleport,#what=poBoss);
         Send(poBoss,@SetMaxHitPoints,#amount=Send(poBoss,@GetMaxHealth));
      }

      propagate;
   }

   SetMonsterGenPoints()
   {
      plGenerators = [ [40, 6], [45, 13], [58, 28], [34, 34], [32, 53],
                       [53, 50], [40, 67], [14, 66], [15, 46], [4, 68] ];

      return;
   }

   SomethingKilled(what = $,victim = $)
   {
      if IsClass(victim,&Lich)
      {
         if ptBoss_gen <> $
         {
            DeleteTimer(ptBoss_gen);
         }
         ptBoss_gen = CreateTimer(self,@BossCanSpawn,viBossResetTime);
         pbBossCanSpawn = FALSE;
      }

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
